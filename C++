/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    int minMeetingRooms(vector<Interval>& intervals) {
        sort(intervals.begin(), intervals.end(),
             [](const Interval & a, const Interval & b){return a.start < b.start || (a.start==b.start && a.end<b.end);});
        priority_queue<int,vector<int>, greater<int>> EndTime; //use a min-heap to store ending time of each room
        for(auto & I: intervals){
            if (!EndTime.empty() && EndTime.top()<=I.start) EndTime.pop();
            EndTime.push(I.end);
        }
        return EndTime.size();
    }
};
